#!/bin/bash

function error()
{
	echo "ERROR: $*" 1>&2
	exit 1
}

function urlencode()
{
	local string="${1}"
	local strlen=${#string}
	local encoded=""
	local pos c o

	for (( pos=0 ; pos<strlen ; pos++ )); do
		c=${string:$pos:1}
		case "$c" in
			[-_.~a-zA-Z0-9] ) o="${c}" ;;
			* ) printf -v o '%%%02x' "'$c"
		esac
		encoded+="${o}"
	done
	echo "${encoded}"
}

if [[ -z "$1" ]] || [[ "$1" == "--help" ]]; then
	echo -e "Usage=\tul --help
\tul getUlRoot

\tul getPropertiesFile
\tul setProperty <property> <value>
\tul getProperty <property>
\tul deleteProperty <property>
\tul getProperties

\tul getServersDir
\tul getConfsDir
\tul getConfDir <conf>
\tul getLoadedConfPath

\tul loadConf <confpath>
\tul updateConf <confpath>

\tul getConfOnLoad <conf>
\tul getConfOnUpdate <conf>
\tul getConfOnCopy <conf>
\tul getConfOnPaste <conf>

\tul createUser <username> <password>
\tul deleteUser <username> <password>
\tul createConf <conf>
\tul deleteConf <conf>
\tul createDefaultConf
\tul doesConfExist <conf>
\tul listLocalConfs
\tul cpConf <from> <to>
\tul addServer <servername> <path>
\tul deleteServer <servername>
\tul listServers
\tul getServerURL <server>
\tul getServerConfURL <serverconf>
\tul isServerConf <conf>
\tul login <username> <password>
\tul logout"

elif [ "$1" == "getUlRoot" ]; then
	[ ! "$2" == "-q" ] && [ ! -f "$HOME"/.ulroot ] && error "ulroot unset"
	ulroot=$(cat "$HOME"/.ulroot)
	[ ! "$2" == "-q" ] && [ ! -d "$ulroot" ] && error "'$ulroot' directory not found"
	echo "$ulroot"

elif [ "$1" == "getPropertiesFile" ]; then
	propsfile=$(. $0 getUlRoot)/properties
	[ ! "$2" == "-q" ] && [ ! -f "$propsfile" ] && error "'$propsfile' not found"
	echo "$propsfile"

elif [ "$1" == "setProperty" ]; then
	if [ -z "$3" ]; then
		error 'setProperty missing argument 3'
	fi
	propsfile=$(. $0 getPropertiesFile)
	sed "/$2=/d" -i "$propsfile"
	echo "$2=$3" >> "$propsfile"

elif [ "$1" == "getProperty" ]; then
	if [ -z "$2" ]; then
		error 'getProperty missing argument 2'
	fi
	propsfile="$(. $0 getPropertiesFile)"
	grep "$2=" "$propsfile" | sed "s/$2=//g"

elif [ "$1" == "deleteProperty" ]; then
	if [ -z "$2" ]; then
		error 'deleteProperty missing argument 2'
	fi
	propsfile="$(. $0 getPropertiesFile)"
	sed '/^'"$2"'=/d' -i "$propsfile"

elif [ "$1" == "getProperties" ]; then
	cat "$(. $0 getPropertiesFile)"

elif [ "$1" == "getServersDir" ]; then
	serversdir="$(. $0 getUlRoot)/servers"
	[ ! "$2" == "-q" ] && [ ! -d "$serversdir" ] && error "'$serversdir' not found"
	echo "$serversdir"

elif [ "$1" == "getConfsDir" ]; then
	confsdir="$(. $0 getUlRoot)/confs"
	[ ! "$2" == "-q" ] && [ ! -d "$confsdir" ] && error "'$confsdir' not found"
	echo "$confsdir"

elif [ "$1" == "getConfDir" ]; then
	if [ -z "$2" ]; then
		error 'getConfDir missing argument 2'
	fi
	confdir="$(. $0 getConfsDir)/$2"
	[ ! "$3" == "-q" ] && [ ! -d "$confdir" ] && error "'$confdir' not found"
	echo "$confdir"

elif [ "$1" == "getLoadedConfPath" ]; then
	echo $(. $0 getConfDir $(. $0 getProperty loadedConf))

elif [ "$1" == "loadConf" ]; then
	if [ -z "$2" ]; then
		error 'loadConf missing argument 2'
	fi

	# inherit
	inheritpath="$(. $0 getConfDir "$2")/ulres/inherit"
	if [ -f "$inheritpath" ]; then
		while read line;
		do
			srcconf="$(awk -F ',' '{print $1 }' <<< "$line")"
			path="$(awk -F ',' '{print $2 }' <<< "$line")"
			override="$(awk -F ',' '{print $3 }' <<< "$line")"
			. $0 cpConf "$srcconf" "$2/$path"
			if [ -n "$override" ]; then
				mv "$(. "$0" getConfDir "$2")/ulres/inheritpaths/$override"/* "$(. "$0" getConfDir "$2")/$path"
			fi
		done < "$inheritpath"
	fi
		
	# onload
	onloadpath="$(. $0 getConfOnLoad "$2" "-q")"
	if [ -f "$onloadpath" ]; then
		chmod +x "$onloadpath"
		"$onloadpath"
	fi

	. $0 setProperty loadedConf "$2"
	sympath="$(. $0 getUlRoot)/loadedConf"
	if [ -d "$sympath" ]; then
		rm "$sympath"
	fi
	ln -s "$(. $0 getLoadedConfPath)" "$sympath"

elif [ "$1" == "updateConf" ]; then
	# TODO
	echo TODO updateConf

elif [ "$1" == "getConfOnLoad" ]; then
	if [ -z "$2" ]; then
		error 'getConfOnLoad missing argument 2'
	fi
	path="$(. $0 getConfDir $2 "-q")/ulres/onload"
	[ ! "$3" == "-q" ] && [ ! -f "$path" ] && error "'$path' not found"
	echo "$path"

elif [ "$1" == "getConfOnUpdate" ]; then
	if [ -z "$2" ]; then
		error 'getConfOnUpdate missing argument 2'
	fi
	path="$(. $0 getConfDir $2 "-q")/ulres/onupdate"
	[ ! "$3" == "-q" ] && [ ! -f "$path" ] && error "'$path' not found"
	echo "$path"

elif [ "$1" == "getConfOnCopy" ]; then
	if [ -z "$2" ]; then
		error 'getConfOnCopy missing argument 2'
	fi
	path="$(. $0 getConfDir $2 "-q")/ulres/oncopy"
	[ ! "$3" == "-q" ] && [ ! -f "$path" ] && error "'$path' not found"
	echo "$path"

elif [ "$1" == "getConfOnPaste" ]; then
	if [ -z "$2" ]; then
		error 'getConfOnPaste missing argument 2'
	fi
	path="$(. $0 getConfDir $2 "-q")/ulres/onpaste"
	[ ! "$3" == "-q" ] && [ ! -f "$path" ] && error "'$path' not found"
	echo "$path"

elif [ "$1" == "createUser" ]; then # server, username, password
	if [ -z "$4" ]; then
		error 'createUser missing argument 4'
	fi
	server="$(. $0 getServerURL "$2")"; username="$3"; password="$4"
	url="$server/index.php?cmd=createUser&username=$(urlencode "$username")&password=$(urlencode "$password")"
	x="$(curl -s "$url")"
	[[ "${#x}" -gt 2 ]] && error "$x"

elif [ "$1" == "deleteUser" ]; then # server, username, password
	if [ -z "$4" ]; then
		error 'deleteUser missing argument 4'
	fi
	server="$(. $0 getServerURL "$2")"; username="$3"; password="$4"
	url="$server/index.php?cmd=deleteUser&username=$(urlencode "$username")&password=$(urlencode "$password")"
	x="$(curl -s "$url")"
	[[ "${#x}" -gt 2 ]] && error "$x"

elif [ "$1" == "createConf" ]; then
	if [ -z "$2" ]; then
		error 'createConf missing argument 2'
	fi
	if [[ "$(. $0 isServerConf "$2")" == true ]]; then

		# <server create>
		if [ -z "$3" ]; then
			username="$(. $0 getProperty username)"
		else
			username="$3"
		fi
		if [ -z "$4" ]; then
			password="$(. $0 getProperty password)"
		else
			password="$4"
		fi
		confname="$(sed 's/.*://g' <<< "$2")"
		url="$(. $0 getServerURL "$2")/index.php?cmd=createConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
		x="$(curl -s "$url")"
		[[ "${#x}" -gt 2 ]] && error "$x"
		# </server create>

	else

		# <client create>
		if [ ! "$(. $0 doesConfExist $2)" == "true" ]; then
			confdir="$(. $0 getConfDir $2 "-q")"
			mkdir "$confdir"
		fi
		# </client create>
	fi

elif [ "$1" == "deleteConf" ]; then
	if [ -z "$2" ]; then
		error 'deleteConf missing argument 2'
	fi
	if [[ "$(. $0 isServerConf "$2")" == true ]]; then
		# <server delete>
		if [ -z "$3" ]; then
			username="$(. $0 getProperty username)"
		else
			username="$3"
		fi
		if [ -z "$4" ]; then
			password="$(. $0 getProperty password)"
		else
			password="$4"
		fi
		confname="$(sed 's/.*://g' <<< "$2")"
		url="$(. $0 getServerURL "$2")/index.php?cmd=deleteConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
		x="$(curl -s "$url")"
		[[ "${#x}" -gt 2 ]] && error "$x"
		# </server delete>
	else
		# <client delete>
		if [[ ! "$(. $0 doesConfExist "$2")" == "true" ]]; then
			if [ ! "$3" == "-q" ]; then
				echo "conf $2 doesn't exist"
			fi
		elif [ "$2" == "$(. $0 getProperty loadedConf)" ]; then
			echo "Cannot delete loaded conf"
		else
			confdir="$(. $0 getConfDir $2)"
			rm -r "$confdir"
		fi
		# </client delete>
	fi

elif [ "$1" == "createDefaultConf" ]; then
	. $0 createConf default

elif [ "$1" == "doesConfExist" ]; then
	if [ -z "$2" ]; then
		error 'doesConfExist missing argument 2'
	fi
	if [ -d $(. $0 getConfDir "$2" '-q') ]; then
		echo true
	else
		echo false
	fi

elif [ "$1" == "listLocalConfs" ]; then
	loadedConf=$(. $0 getProperty loadedConf)
	ls $(. $0 getConfsDir) | sed "s/^$loadedConf$/<$loadedConf>/g"

elif [ "$1" == "cpConf" ]; then
	if [ -z "$3" ]; then
		error 'cpConf missing argument 3'
	fi

	if [[ $2 == *:* ]]; then
		if [[ $3 == *:* ]]; then

			# <server to server>
			error "TODO"
			# </server to server>

		else

			# <server to local>
			. $0 deleteConf "$3" "-q"
			. $0 createConf "$3"

			url="$(. $0 getServerURL "$2")/confs/$(sed 's/.*://g' <<< "$2").zip"
			target="$(. $0 getConfDir "$3")"
			zipfile="$(. $0 getUlRoot)/zippy.zip"

			curl -s "$url" -o "$zipfile"
			unzip "$zipfile" -d "$target"
			rm "$zipfile"
			# </server to local>

		fi
	else
		if [[ $3 == *:* ]]; then

			# <local to server>
			confname="$(sed 's/.*://g' <<< "$3")"
			if [ -z "$4" ]; then
				username="$(. $0 getProperty username)"
			else
				username="$4"
			fi
			if [ -z "$5" ]; then
				password="$(. $0 getProperty password)"
			else
				password="$5"
			fi
			url="$(. $0 getServerURL "$3")/index.php?cmd=setConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
			localconfpath="$(. $0 getConfDir "$2")"
			zipfile="$(. $0 getUlRoot)/zippy.zip"

			(cd "$localconfpath"; zip -r -q "$zipfile" ".")
			[[ ! $? == 0 ]] && error 'cpConf: zip failed'
			x="$(curl -s --form zippy="@$zipfile" "$url")"
			rm "$zipfile"
			[[ ! $? == 0 ]] && error 'cpConf: curl failed'
			[[ "${#x}" -gt 2 ]] && error "$x"
			# </local to server>

		else

			# <local to local>
			frompath="$(. $0 getConfDir $2)"
			[ ! -d "$frompath" ] && error "conf $2 not found"
			topath="$(. $0 getConfDir "$3")"
			cp -r "$frompath" "$topath"
			# </local to local>

		fi
	fi

elif [ "$1" == "addServer" ]; then
	if [ -z "$3" ]; then
		error "addServer missing argument 3"
	fi
	echo "$3" > "$(. $0 getServersDir)/$2"

elif [ "$1" == "deleteServer" ]; then
	if [ -z "$2" ]; then
		error "deleteServer missing argument 2"
	fi
	rm "$(. $0 getServersDir)/$2"

elif [ "$1" == "listServers" ]; then
	for file in $(ls "$(. $0 getServersDir)")
	do
		echo $file=$(cat $(. $0 getServersDir)/$file)
	done

elif [ "$1" == "getServerURL" ]; then
	if [ -z "$2" ]; then
		error "getServerURL missing argument 2"
	fi
	if [[ "$(. $0 isServerConf "$2")" == true ]]; then
		set $2 "$(sed 's/:.*//g' <<< $2)"
	fi

	if [[ $2 == @* ]]; then
		servers="$(. $0 listServers)"
		for server in $servers
		do
			one="$(sed 's/@//g' <<< "$2")"
			two="$(sed 's/=.*//g' <<< "$server")"
			if [ "$one" == "$two" ]; then
				echo $server | sed 's/.*=//g'
				break
			fi
		done
	else
		echo $2
	fi

elif [ "$1" == "getServerConfURL" ]; then
	if [ -z "$2" ]; then
		error "getServerConfURL missing argument 2"
	fi

	server="$(. $0 getServerURL "$(sed 's/:.*//g' <<< "$2")")"
	confname="$(sed 's/.*://g' <<< "$2")"
	echo "$server/confs/$confname"

elif [ "$1" == "isServerConf" ]; then
	if [ -z "$2" ]; then
		error "isServerConf missing argument 2"
	fi
	if [[ $2 == *:* ]]; then
		echo true
	else
		echo false
	fi

elif [ "$1" == "login" ]; then
	if [ -z "$3" ]; then
		error "login missing argument 3"
	fi
	. $0 setProperty username "$2"
	. $0 setProperty password "$3"

elif [ "$1" == "logout" ]; then
	. $0 deleteProperty username
	. $0 deleteProperty password
else
	echo "command '$1' not found"
fi
