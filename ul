#!/bin/bash

# "<url>:<conf>" = serverconfname
# "@<server>:<conf>" = serverconfname
# "<conf>" = localconfname

# "/home/<USER>/.ul/confs/<conf>" = localconfpath
# "<url>/confs/<confname>.zip" = serverconfpath

# serverconfname / localconfname = confname
# serverconfpath / localconfpath = confpath
# confname / confpath = conf

function error()
{
	echo "ERROR: $*" 1>&2
	exit 1
}

function urlencode()
{
	local string="${1}"
	local strlen=${#string}
	local encoded=""
	local pos c o

	for (( pos=0 ; pos<strlen ; pos++ )); do
		c=${string:$pos:1}
		case "$c" in
			[-_.~a-zA-Z0-9] ) o="${c}" ;;
			* ) printf -v o '%%%02x' "'$c"
		esac
		encoded+="${o}"
	done
	echo "${encoded}"
}

if [[ -z "$1" ]] || [[ "$1" == "--help" ]]; then
	echo -e "Usage=\tul --help

\tul loadConf <localconf>
\tul updateConf <localconf>
\tul createUser <username> <password>
\tul deleteUser <username> <password>
\tul createConf <conf>
\tul deleteConf <conf>
\tul createDefaultConf
\tul listLocalConfs
\tul cpConf <conf> <conf>
\tul addServer <servername> <URL>
\tul deleteServer <servername>
\tul listServers
\tul login <username> <password>
\tul logout

\tul getUlRoot
\tul setProperty <property> <value>
\tul getProperty <property>
\tul deleteProperty <property>
\tul getProperties
\tul getServerURL <server>
\tul conftype <conf>
\tul resolveConf <conf>
\tul buildInheritances <localconf>
\tul clearInheritances <localconf>"

#
# foreground
#

elif [ "$1" == "loadConf" ]; then
	if [ -z "$2" ]; then
		error 'loadConf missing argument 2'
	fi
	conf="$(. $0 resolveConf "$2")"
	ulroot="$(. $0 getUlRoot)"

	[[ $(. $0 conftype "$conf") == serverconf* ]] && error "You can only load local confs"
	[ ! -d "$conf" ] && error "conf $conf not found"
	. $0 setProperty loadedConf "$(sed 's/.*\/confs\///g' <<< "$conf")"

	sympath="$ulroot/confs/loaded"
	if [ -d "$sympath" ]; then
		rm "$sympath"
	fi
	ln -s "$conf" "$sympath"

	# onload
	onloadpath="$confpath/ulres/onload"
	if [ -f "$onloadpath" ]; then
		chmod +x "$onloadpath"
		"$onloadpath"
	fi

	. $0 updateConf "$conf"


elif [ "$1" == "updateConf" ]; then
	. $0 clearInheritances "$2"
	. $0 buildInheritances "$2"
	onupdatepath="$(. $0 getUlRoot)/confs/$2/ulres/onupdate"
	if [ -f "$onupdatepath" ]; then
		chmod +x "$onupdatepath"
		"$onupdatepath"
	fi

elif [ "$1" == "createUser" ]; then # server, username, password
	if [ -z "$4" ]; then
		error 'createUser missing argument 4'
	fi
	server="$(. $0 getServerURL "$2")"; username="$3"; password="$4"
	url="$server/index.php?cmd=createUser&username=$(urlencode "$username")&password=$(urlencode "$password")"
	x="$(curl -s "$url")"
	[[ "${#x}" -gt 2 ]] && error "answer: $x"

elif [ "$1" == "deleteUser" ]; then # server, username, password
	if [ -z "$4" ]; then
		error 'deleteUser missing argument 4'
	fi
	server="$(. $0 getServerURL "$2")"; username="$3"; password="$4"
	url="$server/index.php?cmd=deleteUser&username=$(urlencode "$username")&password=$(urlencode "$password")"
	x="$(curl -s "$url")"
	[[ "${#x}" -gt 2 ]] && error "answer: $x"

elif [ "$1" == "createConf" ]; then
	if [ -z "$2" ]; then
		error 'createConf missing argument 2'
	fi
	conf="$(. $0 resolveConf "$2")"
	if [[ $(. $0 conftype "$conf") == serverconf* ]]; then

		# <server create>
		if [ -z "$3" ]; then
			username="$(. $0 getProperty username)"
		else
			username="$3"
		fi
		if [ -z "$4" ]; then
			password="$(. $0 getProperty password)"
		else
			password="$4"
		fi
		confname="$(sed 's/.*://g' <<< "$2")"
		url="$(. $0 getServerURL "$2")/index.php?cmd=createConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
		x="$(curl -s "$url")"
		[[ "${#x}" -gt 2 ]] && error "answer: $x"
		# </server create>

	else

		# <client create>
		if [ ! -d "$conf" ]; then
			mkdir "$conf"
		fi
		# </client create>
	fi

elif [ "$1" == "deleteConf" ]; then
	if [ -z "$2" ]; then
		error 'deleteConf missing argument 2'
	fi
	conf="$(. $0 resolveConf "$2")"
	if [[ $(. $0 conftype "$conf") == serverconf* ]]; then
		# <server delete>
		if [ -z "$3" ]; then
			username="$(. $0 getProperty username)"
		else
			username="$3"
		fi
		if [ -z "$4" ]; then
			password="$(. $0 getProperty password)"
		else
			password="$4"
		fi
		confname="$(sed 's/.*://g' <<< "$conf")"
		url="$(. $0 getServerURL "$conf")/index.php?cmd=deleteConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
		x="$(curl -s "$url")"
		[[ "${#x}" -gt 2 ]] && error "answer: $x"
		# </server delete>
	else
		# <client delete>
		if [ ! -d "$conf" ]; then
			if [ ! "$3" == "-q" ]; then
				echo "conf $conf doesn't exist"
			fi
		elif [ "$conf" == "$(. $0 getProperty loadedConf)" ]; then
			echo "Cannot delete loaded conf"
		else
			rm -r "$conf"
		fi
		# </client delete>
	fi

elif [ "$1" == "createDefaultConf" ]; then
	. $0 createConf default

elif [ "$1" == "listLocalConfs" ]; then
	loadedConf=$(. $0 getProperty loadedConf)
	ls "$(. $0 getUlRoot)/confs" | sed "s/^$loadedConf$/<$loadedConf>/g"

elif [ "$1" == "cpConf" ]; then
	if [ -z "$3" ]; then
		error 'cpConf missing argument 3'
	fi

	ulroot="$(. $0 getUlRoot)"

	one="$(. $0 resolveConf "$2")"
	two="$(. $0 resolveConf "$3")"
	if [[ $(. $0 conftype "$one") == localconf* ]]; then
		. $0 clearInheritances "$one"
	fi

	if [[ $one == *:* ]]; then
		if [[ $two == *:* ]]; then

			# <server to server>
			url="$(awk -F ':' '{print $1}' <<< "$one")/confs/$(awk -F ':' '{print $2}' <<< "$one").zip"
			zipfile="$(. $0 getUlRoot)/zippy.zip"
			curl -s "$url" -o "$zipfile"


			if [ -z "$4" ]; then
				username="$(. $0 getProperty username)"
			else
				username="$4"
			fi
			if [ -z "$5" ]; then
				password="$(. $0 getProperty password)"
			else
				password="$5"
			fi
			confname="$(sed 's/.*://g' <<< "$two")"
			url="$(awk -F ':' '{print $1}' <<< "$two")/index.php?cmd=setConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
			x="$(curl -s --form zippy="@$zipfile" "$url")"
			rm "$zipfile"
			[[ ! $? == 0 ]] && error 'cpConf: curl failed'
			[[ "${#x}" -gt 2 ]] && error "answer: $x"
			# </server to server>

		else

			# <server to local>
			. $0 deleteConf "$two" "-q"
			. $0 createConf "$two"

			url="$(awk -F ':' '{print $1}' <<< "$one")/confs/$(awk -F ':' '{print $2}' <<< "$one").zip"
			zipfile="$(. $0 getUlRoot)/zippy.zip"

			curl -s "$url" -o "$zipfile"
			unzip -q "$zipfile" -d "$two"
			rm "$zipfile"
			# </server to local>

		fi
	else
		if [[ $two == *:* ]]; then

			# <local to server>
			confname="$(sed 's/.*://g' <<< "$two")"
			if [ -z "$4" ]; then
				username="$(. $0 getProperty username)"
			else
				username="$4"
			fi
			if [ -z "$5" ]; then
				password="$(. $0 getProperty password)"
			else
				password="$5"
			fi
			url="$(awk -F ':' '{print $1}' <<< "$two")/index.php?cmd=setConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
			localconfpath="$one"
			zipfile="$(. $0 getUlRoot)/zippy.zip"

			(cd "$localconfpath"; zip -r -q "$zipfile" ".")
			[[ ! $? == 0 ]] && error 'cpConf: zip failed'
			x="$(curl -s --form zippy="@$zipfile" "$url")"
			rm "$zipfile"
			[[ ! $? == 0 ]] && error 'cpConf: curl failed'
			[[ "${#x}" -gt 2 ]] && error "answer: $x"
			# </local to server>

		else

			# <local to local>
			[ ! -d "$one" ] && error "conf $one not found"
			[ -d "$two" ] && rm -r "$two"
			mkdir "$two"
			cp -r "$one"/* "$two"
			# </local to local>

		fi
	fi

elif [ "$1" == "addServer" ]; then
	if [ -z "$3" ]; then
		error "addServer missing argument 3"
	fi
	echo "$3" > "$(. $0 getUlRoot)/servers/$2"

elif [ "$1" == "deleteServer" ]; then
	if [ -z "$2" ]; then
		error "deleteServer missing argument 2"
	fi
	rm "$(. $0 getUlRoot)/servers/$2"

elif [ "$1" == "listServers" ]; then
	serversdir="$(. $0 getUlRoot)/servers"
	for file in $(ls "$serversdir")
	do
		echo "$file=$(cat "$serversdir/$file")"
	done

elif [ "$1" == "login" ]; then
	if [ -z "$3" ]; then
		error "login missing argument 3"
	fi
	. $0 setProperty username "$2"
	. $0 setProperty password "$3"

elif [ "$1" == "logout" ]; then
	. $0 deleteProperty username
	. $0 deleteProperty password

#
# background
#

elif [ "$1" == "getUlRoot" ]; then
	[ ! "$2" == "-q" ] && [ ! -f "$HOME"/.ulroot ] && error "ulroot unset"
	ulroot=$(cat "$HOME"/.ulroot)
	[ ! "$2" == "-q" ] && [ ! -d "$ulroot" ] && error "'$ulroot' directory not found"
	echo "$ulroot"

elif [ "$1" == "setProperty" ]; then
	if [ -z "$3" ]; then
		error 'setProperty missing argument 3'
	fi
	propsfile="$(. $0 getUlRoot)/properties"
	[ ! -f $propsfile ] && error "$propsfile not found"
	sed "/$2=/d" -i "$propsfile"
	echo "$2=$3" >> "$propsfile"

elif [ "$1" == "getProperty" ]; then
	if [ -z "$2" ]; then
		error 'getProperty missing argument 2'
	fi
	propsfile="$(. $0 getUlRoot)/properties"
	[ ! -f $propsfile ] && error "$propsfile not found"
	grep "$2=" "$propsfile" | sed "s/$2=//g"

elif [ "$1" == "deleteProperty" ]; then
	if [ -z "$2" ]; then
		error 'deleteProperty missing argument 2'
	fi
	propsfile="$(. $0 getUlRoot)/properties"
	[ ! -f $propsfile ] && error "$propsfile not found"
	sed '/^'"$2"'=/d' -i "$propsfile"

elif [ "$1" == "getProperties" ]; then
	cat "$(. $0 getUlRoot)/properties"

elif [ "$1" == "getServerURL" ]; then
	if [ -z "$2" ]; then
		error "getServerURL missing argument 2"
	fi
	if [[ $(. $0 conftype "$2") == serverconf* ]]; then
		set $2 "$(sed 's/:.*//g' <<< $2)"
	fi

	if [[ $2 == @* ]]; then
		servers="$(. $0 listServers)"
		for server in $servers
		do
			one="$(sed 's/@//g' <<< "$2")"
			two="$(sed 's/=.*//g' <<< "$server")"
			if [ "$one" == "$two" ]; then
				echo $server | sed 's/.*=//g'
				break
			fi
		done
	else
		echo $2
	fi

elif [ "$1" == "conftype" ]; then
	if [ -z "$2" ]; then
		error "conftype missing argument 2"
	fi

	if [[ $2 == *:* ]]; then
		echo "serverconfname"
	elif [[ $2 == */* ]]; then
		if [[ $2 == *.*/confs/*.zip ]]; then
			echo "serverconfpath"
		else
			echo "localconfpath"
		fi
	else
		echo "localconfname"
	fi

elif [ "$1" == "resolveConf" ]; then # resolves @server notation / localconfname -> localconfpath / serverconfpath -> serverconfname
	if [ -z "$2" ]; then
		error "resolveConf missing argument 2"
	fi

	t="$(. $0 conftype "$2")"
	ulroot="$(. $0 getUlRoot)"
	if [[ "$2" == "loaded" ]] || [[ "$2" == "$ulroot/confs/loaded" ]]; then
		loaded="$(. $0 getProperty loadedConf)"
		echo "$ulroot/confs/$loaded"
	elif [[ $t == localconfname ]]; then
		echo "$(. $0 getUlRoot)/confs/$2"
	elif [[ $t == serverconfpath ]]; then
		echo "$(awk -F '/confs/' '{print $1}' <<< "$2"):$(awk -F '.zip' '{print $1}' <<< "$(awk -F '/confs/' '{print $2}' <<< "$2")")"
	elif [[ $2 == @* ]]; then
		left="$(awk -F ':' '{print $1}' <<< "$2")"
		right="$(awk -F ':' '{print $2}' <<< "$2")"

		servers="$(. $0 listServers)"
		one="$(sed 's/@//g' <<< "$left")"
		for server in $servers
		do
			two="$(sed 's/=.*//g' <<< "$server")"
			if [ "$one" == "$two" ]; then
				x=$(sed 's/.*=//g' <<< $server)
				echo "$x:$right"
				break
			fi
		done
	else
		echo "$2"
	fi

elif [ "$1" == "buildInheritances" ]; then
	if [ -z "$2" ]; then
		error "buildInheritances missing argument 2"
	fi

	confpath="$(. $0 resolveConf "$2")"
	inheritpath="$confpath/ulres/inherit"
	if [ -f "$inheritpath" ]; then
		while read line;
		do
			from="$(awk -F ',' '{print $1 }' <<< "$line")"
			to="$(awk -F ',' '{print $2 }' <<< "$line")"
			override="$(awk -F ',' '{print $3 }' <<< "$line")"
			. $0 cpConf "$from" "$confpath/$to"
			if [ -n "$override" ]; then
				from="$confpath/ulres/inheritpaths/$override"
				[ ! -d "$from" ] && error "$from not found"
				mv "$from"/* "$confpath/$to"
			fi
		done < "$inheritpath"
	fi

elif [ "$1" == "clearInheritances" ]; then
	if [ -z "$2" ]; then
		error "clearInheritances missing argument 2"
	fi

	confpath="$(. $0 resolveConf "$2")"
	inheritpath="$confpath/ulres/inherit"
	if [ -f "$inheritpath" ]; then
		while read line;
		do
			to="$(awk -F ',' '{print $2 }' <<< "$line")"
			thing="$confpath/$to"
			if [ -e "$thing" ]; then
				rm -r "$thing"
			fi
		done < "$inheritpath"
	fi

else
	echo "command '$1' not found"
fi
