#!/bin/bash

# "<url>:<conf>" = serverconfname
# "@<server>:<conf>" = serverconfname
# "<conf>" = localconfname

# "/home/<USER>/.ul/confs/<conf>" = localconfpath
# "<url>/confs/<confname>.zip" = serverconfpath

# serverconfname / localconfname = confname
# serverconfpath / localconfpath = confpath
# confname / confpath = conf

function error()
{
	echo "ERROR: $*" 1>&2
	exit 1
}

function urlencode()
{
	local string="${1}"
	local strlen=${#string}
	local encoded=""
	local pos c o

	for (( pos=0 ; pos<strlen ; pos++ )); do
		c=${string:$pos:1}
		case "$c" in
			[-_.~a-zA-Z0-9] ) o="${c}" ;;
			* ) printf -v o '%%%02x' "'$c"
		esac
		encoded+="${o}"
	done
	echo "${encoded}"
}

#
# foreground
#

function loadConf()
{
	if [ -z "$1" ]; then
		error 'loadConf missing argument 2'
	fi
	conf="$(resolveConf "$1")"
	ulroot="$(getUlRoot)"

	[[ $(conftype "$conf") == serverconf* ]] && error "You can only load local confs"
	[ ! -d "$conf" ] && error "conf $conf not found"
	setProperty loadedConf "$(sed 's/.*\/confs\///g' <<< "$conf")"

	sympath="$ulroot/confs/loaded"
	if [ -d "$sympath" ]; then
		rm "$sympath"
	fi
	ln -s "$conf" "$sympath"

	# onload
	onloadpath="$conf/ulres/onload"
	if [ -f "$onloadpath" ]; then
		chmod +x "$onloadpath"
		"$onloadpath"
	fi
}

function updateConf()
{
	clearInheritances "$1"
	buildInheritances "$1"
	onupdatepath="$(getUlRoot)/confs/$1/ulres/onupdate"
	if [ -f "$onupdatepath" ]; then
		chmod +x "$onupdatepath"
		"$onupdatepath"
	fi
}

function createUser() # server, username,()
{
	if [ -z "$3" ]; then
		error 'createUser missing argument 4'
	fi
	server="$(getServerURL "$1")"; username="$2"; password="$3"
	url="$server/index.php?cmd=createUser&username=$(urlencode "$username")&password=$(urlencode "$password")"
	x="$(curl -s "$url")"
	[[ "${#x}" -gt 2 ]] && error "answer: $x"
}

function deleteUser() # server, username, password
{
	if [ -z "$3" ]; then
		error 'deleteUser missing argument 4'
	fi
	server="$(getServerURL "$1")"; username="$2"; password="$3"
	url="$server/index.php?cmd=deleteUser&username=$(urlencode "$username")&password=$(urlencode "$password")"
	x="$(curl -s "$url")"
	[[ "${#x}" -gt 2 ]] && error "answer: $x"
}

function createConf()
{
	if [ -z "$1" ]; then
		error 'createConf missing argument 2'
	fi
	conf="$(resolveConf "$1")"
	if [[ $(conftype "$conf") == serverconf* ]]; then

		# <server create>
		if [ -z "$2" ]; then
			username="$(getProperty username)"
		else
			username="$2"
		fi
		if [ -z "$3" ]; then
			password="$(getProperty password)"
		else
			password="$3"
		fi
		confname="$(sed 's/.*://g' <<< "$1")"
		url="$(getServerURL "$1")/index.php?cmd=createConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
		x="$(curl -s "$url")"
		[[ "${#x}" -gt 2 ]] && error "answer: $x"
		# </server create>

	else

		# <client create>
		if [ ! -d "$conf" ]; then
			mkdir "$conf"
		fi
		# </client create>
	fi
}

function deleteConf()
{
	if [ -z "$1" ]; then
		error 'deleteConf missing argument 2'
	fi
	conf="$(resolveConf "$1")"
	if [[ $(conftype "$conf") == serverconf* ]]; then
		# <server delete>
		if [ -z "$2" ]; then
			username="$(getProperty username)"
		else
			username="$2"
		fi
		if [ -z "$3" ]; then
			password="$(getProperty password)"
		else
			password="$3"
		fi
		confname="$(sed 's/.*://g' <<< "$conf")"
		url="$(getServerURL "$conf")/index.php?cmd=deleteConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
		x="$(curl -s "$url")"
		[[ "${#x}" -gt 2 ]] && error "answer: $x"
		# </server delete>
	else
		# <client delete>
		if [ ! -d "$conf" ]; then
			if [ ! "$2" == "-q" ]; then
				echo "conf $conf doesn't exist"
			fi
		elif [ "$conf" == "$(getProperty loadedConf)" ]; then
			echo "Cannot delete loaded conf"
		else
			rm -r "$conf"
		fi
		# </client delete>
	fi
}

function createDefaultConf()
{
	createConf default
}

function listLocalConfs()
{
	loadedConf=$(getProperty loadedConf)
	ls "$(getUlRoot)/confs" | sed "s/^$loadedConf$/<$loadedConf>/g"
}

function cpConf()
{
	if [ -z "$2" ]; then
		error 'cpConf missing argument 3'
	fi

	ulroot="$(getUlRoot)"

	one="$(resolveConf "$1")"
	two="$(resolveConf "$2")"
	if [[ $(conftype "$one") == localconf* ]]; then
		clearInheritances "$one"
	fi

	if [[ $one == *:* ]]; then
		if [[ $two == *:* ]]; then

			# <server to server>
			url="$(awk -F ':' '{print $1}' <<< "$one")/confs/$(awk -F ':' '{print $2}' <<< "$one").zip"
			zipfile="$(getUlRoot)/zippy.zip"
			curl -s "$url" -o "$zipfile"


			if [ -z "$3" ]; then
				username="$(getProperty username)"
			else
				username="$3"
			fi
			if [ -z "$4" ]; then
				password="$(getProperty password)"
			else
				password="$4"
			fi
			confname="$(sed 's/.*://g' <<< "$two")"
			url="$(awk -F ':' '{print $1}' <<< "$two")/index.php?cmd=setConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
			x="$(curl -s --form zippy="@$zipfile" "$url")"
			rm "$zipfile"
			[[ ! $? == 0 ]] && error 'cpConf: curl failed'
			[[ "${#x}" -gt 2 ]] && error "answer: $x"
			# </server to server>

		else

			# <server to local>
			deleteConf "$two" "-q"
			createConf "$two"

			url="$(awk -F ':' '{print $1}' <<< "$one")/confs/$(awk -F ':' '{print $2}' <<< "$one").zip"
			zipfile="$(getUlRoot)/zippy.zip"

			curl -s "$url" -o "$zipfile"
			unzip -q "$zipfile" -d "$two"
			rm "$zipfile"
			# </server to local>

		fi
	else
		if [[ $two == *:* ]]; then

			# <local to server>
			confname="$(sed 's/.*://g' <<< "$two")"
			if [ -z "$3" ]; then
				username="$(getProperty username)"
			else
				username="$3"
			fi
			if [ -z "$4" ]; then
				password="$(getProperty password)"
			else
				password="$4"
			fi
			url="$(awk -F ':' '{print $1}' <<< "$two")/index.php?cmd=setConf&confname=$(urlencode "$confname")&username=$(urlencode "$username")&password=$(urlencode "$password")"
			localconfpath="$one"
			zipfile="$(getUlRoot)/zippy.zip"

			(cd "$localconfpath"; zip -r -q "$zipfile" ".")
			[[ ! $? == 0 ]] && error 'cpConf: zip failed'
			x="$(curl -s --form zippy="@$zipfile" "$url")"
			rm "$zipfile"
			[[ ! $? == 0 ]] && error 'cpConf: curl failed'
			[[ "${#x}" -gt 2 ]] && error "answer: $x"
			# </local to server>

		else

			# <local to local>
			[ ! -d "$one" ] && error "conf $one not found"
			[ -d "$two" ] && rm -r "$two"
			mkdir "$two"
			cp -r "$one"/* "$two"
			# </local to local>

		fi
	fi
}

function addServer()
{
	if [ -z "$2" ]; then
		error "addServer missing argument 3"
	fi
	echo "$2" > "$(getUlRoot)/servers/$1"
}

function deleteServer()
{
	if [ -z "$1" ]; then
		error "deleteServer missing argument 2"
	fi
	rm "$(getUlRoot)/servers/$1"
}

function listServers()
{
	serversdir="$(getUlRoot)/servers"
	for file in $(ls "$serversdir")
	do
		echo "$file=$(cat "$serversdir/$file")"
	done
}

function login()
{
	if [ -z "$2" ]; then
		error "login missing argument 3"
	fi
	setProperty username "$1"
	setProperty password "$2"
}

function logout()
{
	deleteProperty username
	deleteProperty password
}

#
# background
#

function getUlRoot()
{
	[ ! "$1" == "-q" ] && [ ! -f "$HOME"/.ulroot ] && error "ulroot unset"
	ulroot=$(cat "$HOME"/.ulroot)
	[ ! "$1" == "-q" ] && [ ! -d "$ulroot" ] && error "'$ulroot' directory not found"
	echo "$ulroot"
}

function setProperty()
{
	if [ -z "$2" ]; then
		error 'setProperty missing argument 3'
	fi
	propsfile="$(getUlRoot)/properties"
	a="$(sed 's/=/\\=/g' <<< "$(sed 's/\\/\\\\/g' <<< "$1")")"
	b="$(sed 's/=/\\=/g' <<< "$(sed 's/\\/\\\\/g' <<< "$2")")"
	[ ! -f $propsfile ] && error "$propsfile not found"
	sed "/$a=/d" -i "$propsfile"
	echo "$a=$b" >> "$propsfile"
}

function getProperty()
{
	if [ -z "$1" ]; then
		error 'getProperty missing argument 2'
	fi
	propsfile="$(getUlRoot)/properties"
	[ ! -f $propsfile ] && error "$propsfile not found"
	a="$(sed 's/\\/\\\\/g' <<< "$(sed 's/=/\\=/g' <<< "$(sed 's/\\/\\\\/g' <<< "$1")")")"
	grep '^'"$a"'=' "$propsfile" | sed 's/^'"$a"'=//g' | sed 's/\\=/=/g' | sed 's/\\\\/\\/g'
}

function deleteProperty()
{
	if [ -z "$1" ]; then
		error 'deleteProperty missing argument 2'
	fi
	propsfile="$(getUlRoot)/properties"
	[ ! -f $propsfile ] && error "$propsfile not found"
	a="$(sed 's/\\/\\\\/g' <<< "$(sed 's/=/\\=/g' <<< "$(sed 's/\\/\\\\/g' <<< "$1")")")"
	sed '/^'"$a"'=/d' -i "$propsfile"
}

function getProperties()
{
	cat "$(getUlRoot)/properties"
}

function getServerURL()
{
	if [ -z "$1" ]; then
		error "getServerURL missing argument 2"
	fi
	if [[ $(conftype "$1") == serverconf* ]]; then
		set $1 "$(sed 's/:.*//g' <<< $1)"
	fi

	if [[ $1 == @* ]]; then
		servers="$(listServers)"
		for server in $servers
		do
			one="$(sed 's/@//g' <<< "$1")"
			two="$(sed 's/=.*//g' <<< "$server")"
			if [ "$one" == "$two" ]; then
				echo $server | sed 's/.*=//g'
				break
			fi
		done
	else
		echo $1
	fi
}

function conftype()
{
	if [ -z "$1" ]; then
		error "conftype missing argument 2"
	fi

	if [[ $1 == *:* ]]; then
		echo "serverconfname"
	elif [[ $1 == */* ]]; then
		if [[ $1 == *.*/confs/*.zip ]]; then
			echo "serverconfpath"
		else
			echo "localconfpath"
		fi
	else
		echo "localconfname"
	fi
}

function resolveConf() # resolves @server notation / localconfname -> localconfpath / serverconfpath -> serverconfname
{
	if [ -z "$1" ]; then
		error "resolveConf missing argument 2"
	fi

	t="$(conftype "$1")"
	ulroot="$(getUlRoot)"
	if [[ "$1" == "loaded" ]] || [[ "$1" == "$ulroot/confs/loaded" ]]; then
		loaded="$(getProperty loadedConf)"
		echo "$ulroot/confs/$loaded"
	elif [[ $t == localconfname ]]; then
		echo "$(getUlRoot)/confs/$1"
	elif [[ $t == serverconfpath ]]; then
		echo "$(awk -F '/confs/' '{print $1}' <<< "$1"):$(awk -F '.zip' '{print $1}' <<< "$(awk -F '/confs/' '{print $2}' <<< "$1")")"
	elif [[ $1 == @* ]]; then
		left="$(awk -F ':' '{print $1}' <<< "$1")"
		right="$(awk -F ':' '{print $2}' <<< "$1")"

		servers="$(listServers)"
		one="$(sed 's/@//g' <<< "$left")"
		for server in $servers
		do
			two="$(sed 's/=.*//g' <<< "$server")"
			if [ "$one" == "$two" ]; then
				x=$(sed 's/.*=//g' <<< $server)
				echo "$x:$right"
				break
			fi
		done
	else
		echo "$1"
	fi
}

function buildInheritances()
{
	if [ -z "$1" ]; then
		error "buildInheritances missing argument 2"
	fi

	local confpath="$(resolveConf "$1")"
	local inheritpath="$confpath/ulres/inherit"
	if [ -f "$inheritpath" ]; then
		while read theline;
		do
			local line="$theline"
			local confpath="$(resolveConf "$1")" # needed !
			local from="$(awk -F ',' '{print $1 }' <<< "$line")"
			local to="$(awk -F ',' '{print $2 }' <<< "$line")"
			echo "copying from $from to $confpath/$to"
			cpConf "$from" "$confpath/$to"
			echo "bulding $confpath/$to"
			buildInheritances "$confpath/$to"
		done < "$inheritpath"
		if [ -d "$confpath/ulres/override" ]; then
			echo "overriding $confpath/ulres/override/* to $confpath"
			cp -r "$confpath/ulres/override"/* "$confpath"
		fi
	fi
}

function clearInheritances()
{
	if [ -z "$1" ]; then
		error "clearInheritances missing argument 2"
	fi

	confpath="$(resolveConf "$1")"
	inheritpath="$confpath/ulres/inherit"
	if [ -f "$inheritpath" ]; then
		while read line;
		do
			to="$(awk -F ',' '{print $2 }' <<< "$line")"
			thing="$confpath/$to"
			if [ -e "$thing" ]; then
				rm -r "$thing"
			fi
		done < "$inheritpath"
	fi
}

if [ "$1" == "loadConf" ]; then
	loadConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "updateConf" ]; then
	updateConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "createUser" ]; then # server, username, password
	createUser "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "deleteUser" ]; then # server, username, password
	deleteUser "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "createConf" ]; then
	createConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "deleteConf" ]; then
	deleteConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "createDefaultConf" ]; then
	createDefaultConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "listLocalConfs" ]; then
	listLocalConfs "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "cpConf" ]; then
	cpConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "addServer" ]; then
	addServer "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "deleteServer" ]; then
	deleteServer "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "listServers" ]; then
	listServers "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "login" ]; then
	login "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "logout" ]; then
	logout "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "getUlRoot" ]; then
	getUlRoot "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "setProperty" ]; then
	setProperty "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "getProperty" ]; then
	getProperty "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "deleteProperty" ]; then
	deleteProperty "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "getProperties" ]; then
	getProperties "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "getServerURL" ]; then
	getServerURL "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "conftype" ]; then
	conftype "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "resolveConf" ]; then # resolves @server notation / localconfname -> localconfpath / serverconfpath -> serverconfname
	resolveConf "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "buildInheritances" ]; then
	buildInheritances "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
elif [ "$1" == "clearInheritances" ]; then
	clearInheritances "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
else
       	echo -e "Usage:\tul --help
\tul loadConf <localconf>
\tul updateConf <localconf>
\tul createUser <username> <password>
\tul deleteUser <username> <password>
\tul createConf <conf>
\tul deleteConf <conf>
\tul createDefaultConf
\tul listLocalConfs
\tul cpConf <conf> <conf>
\tul addServer <servername> <URL>
\tul deleteServer <servername>
\tul listServers
\tul login <username> <password>
\tul logout

\tul getUlRoot
\tul setProperty <property> <value>
\tul getProperty <property>
\tul deleteProperty <property>
\tul getProperties
\tul getServerURL <server>
\tul conftype <conf>
\tul resolveConf <conf>
\tul buildInheritances <localconf>
\tul clearInheritances <localconf>"
fi
